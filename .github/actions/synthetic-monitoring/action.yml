name: 'Synthetic Monitoring'
description: 'Run synthetic monitoring tests with Playwright, sending metrics to Prometheus and traces to S3'
branding:
  icon: 'activity'
  color: 'blue'

inputs:
  test_url:
    description: 'Target URL to test'
    required: true
  aws_access_key_id:
    description: 'AWS/S3 Access Key ID'
    required: true
  aws_secret_access_key:
    description: 'AWS/S3 Secret Access Key'
    required: true
  aws_region:
    description: 'AWS/S3 Region. For AWS S3 buckets, this must match your bucket region (e.g., us-east-2)'
    required: true
  s3_bucket:
    description: 'S3 Bucket name'
    required: true
  s3_endpoint:
    description: 'S3 Endpoint URL (Do NOT set this for AWS S3 buckets. Only use for non-AWS S3-compatible services)'
    required: false
  s3_force_path_style:
    description: 'Use path-style addressing for S3 (Do NOT set this for AWS S3 buckets. Only use for non-AWS S3-compatible services)'
    required: false
    default: 'false'
  s3_tls_verify:
    description: 'Verify TLS certificates for S3 (Do NOT set this for AWS S3 buckets. Only use for non-AWS S3-compatible services)'
    required: false
    default: 'true'
  prometheus_pushgateway:
    description: 'Prometheus Pushgateway URL'
    required: true
  browser:
    description: 'Browser to use for testing'
    required: false
    default: 'chromium'
  config_path:
    description: 'Path to Playwright config file'
    required: false
    default: ''
  test_dir:
    description: 'Directory containing test files'
    required: false
    default: ''
  env_vars:
    description: 'JSON string of additional environment variables'
    required: false
    default: '{}'

runs:
  using: "docker"
  # This image will be built and pushed by the .github/workflows/publish-docker.yml workflow
  # It uses ghcr.io/OWNER/REPO-action:tag format
  image: "docker://ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-action:latest" # Or a specific tag/SHA
  # The entrypoint script is expected to be in the image, copied by the Dockerfile's `COPY . .` command.
  # Its path within the image will be ./.github/actions/synthetic-monitoring/scripts/docker-entrypoint.sh
  # However, GitHub Actions Docker runs typically execute commands from the GITHUB_WORKSPACE,
  # so the script will be at: .github/actions/synthetic-monitoring/scripts/docker-entrypoint.sh
  # We need to make it executable if not already. The Dockerfile doesn't do this.
  # The action runner will make it executable.

  # Environment variables for the Docker container are automatically created from inputs.
  # e.g., inputs.test_url becomes INPUT_TEST_URL

  # The command to run inside the Docker container.
  # This will execute the script that sources .env and then runs the tests.
  entrypoint: ".github/actions/synthetic-monitoring/scripts/docker-entrypoint.sh"

  # Steps to run on the runner *before* the Docker container starts.
  # We still need to create the .env file here, as it uses secrets.
  # This .env file will be available in the Docker container's GITHUB_WORKSPACE.
  pre-steps:
    - name: Setup environment file
      shell: bash
      run: |
        # Ensure jq is available on the runner for this step
        if ! command -v jq &> /dev/null; then
            echo "jq could not be found, trying to install."
            if command -v apt-get >/dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
            elif command -v apk >/dev/null; then
              sudo apk add --no-cache jq
            elif command -v yum >/dev/null; then
              sudo yum install -y jq
            else
              echo "Error: jq is not installed and could not be installed. Cannot parse env_vars."
              exit 1
            fi
        fi

        # Infrastructure secrets
        cat << EOF > .env
        AWS_ACCESS_KEY_ID=${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY=${{ inputs.aws_secret_access_key }}
        AWS_REGION=${{ inputs.aws_region }}
        S3_BUCKET=${{ inputs.s3_bucket }}
        PROMETHEUS_PUSHGATEWAY=${{ inputs.prometheus_pushgateway }}
        TEST_URL=${{ inputs.test_url }}
        EOF

        # Only add S3 endpoint configuration for non-AWS S3 services
        if [ -n "${{ inputs.s3_endpoint }}" ]; then
          cat << EOF >> .env
        S3_ENDPOINT=${{ inputs.s3_endpoint }}
        S3_FORCE_PATH_STYLE=${{ inputs.s3_force_path_style }}
        S3_TLS_VERIFY=${{ inputs.s3_tls_verify }}
        EOF
        fi

        # Add custom environment variables if provided
        if [ -n "${{ inputs.env_vars }}" ] && [ "${{ inputs.env_vars }}" != "{}" ]; then
          echo "Processing env_vars: ${{ inputs.env_vars }}"
          echo "${{ inputs.env_vars }}" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' >> .env
        fi
        echo "Generated .env file content:"
        cat .env

  # Steps to run on the runner *after* the Docker container finishes.
  post-steps:
    - name: Upload Playwright report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report-${{ github.run_id }}
        path: |
          playwright-report/
          test-results/
        retention-days: 30
