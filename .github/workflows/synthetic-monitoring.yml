name: Synthetic Monitoring

on:
  schedule:
    - cron: '*/30 * * * *'  # Regular monitoring
    - cron: '0 2 * * 1'     # Weekly security scan
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      test_url:
        description: 'Target URL to test'
        required: false
        type: string
      scan_type:
        description: 'Type of scan to run'
        required: false
        type: choice
        options:
          - monitoring
          - security
          - both
        default: 'both'

env:
  TEST_URL: ${{ inputs.test_url || secrets.TEST_URL }}
  ZAP_API_URL: http://localhost:8080
  ZAP_API_KEY: ${{ secrets.ZAP_API_KEY || '' }}
  AUTH_USERNAME: ${{ secrets.AUTH_USERNAME }}
  AUTH_PASSWORD: ${{ secrets.AUTH_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  PROMETHEUS_PUSHGATEWAY: ${{ secrets.PROMETHEUS_PUSHGATEWAY }}
  GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
  NODE_ENV: production
  DEBUG: pw:api*,zap:*
  SCAN_TYPE: ${{ github.event.schedule == '0 2 * * 1' && 'full' || github.event_name == 'pull_request' && 'quick' || inputs.scan_type || 'monitoring' }}
  GITHUB_EVENT_NAME: ${{ github.event_name }}

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    services:
      zap:
        image: ghcr.io/zaproxy/zaproxy:weekly
        ports:
          - 8080:8080
        options: >-
          -e ZAP_PORT=8080
          -e JAVA_OPTS="-Xmx4096m"
          --user zap
        command: zap.sh -daemon -port 8080 -host 0.0.0.0 -config api.disablekey=false -config database.recoverylog=false -config connection.timeoutInSecs=120 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for ZAP
        run: |
          echo "Waiting for ZAP to be ready..."
          attempt=1
          max_attempts=30
          until curl -s http://localhost:8080/ > /dev/null; do
            if [ $attempt -eq $max_attempts ]; then
              echo "ZAP failed to start after $max_attempts attempts"
              exit 1
            fi
            echo "Attempt $attempt: ZAP not ready, waiting..."
            sleep 2
            attempt=$((attempt + 1))
          done
          echo "ZAP is ready"

      - name: Configure ZAP
        run: |
          # Core settings
          curl -s "http://localhost:8080/JSON/core/action/setOptionDefaultUserAgent/?String=Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/120.0.0.0 Safari/537.36"
          curl -s "http://localhost:8080/JSON/core/action/setOptionHttpStateEnabled/?boolean=true"
          curl -s "http://localhost:8080/JSON/core/action/setOptionUseProxyChain/?boolean=true"
          
          # Performance settings
          curl -s "http://localhost:8080/JSON/core/action/setOptionThreadPerHost/?Integer=4"
          curl -s "http://localhost:8080/JSON/spider/action/setOptionMaxDuration/?Integer=60"
          curl -s "http://localhost:8080/JSON/ascan/action/setOptionThreadPerHost/?Integer=4"

      - name: Run tests
        env:
          PLAYWRIGHT_JSON_OUTPUT_NAME: playwright-report/results.json
          ZAP_API_URL: http://localhost:8080
          TEST_URL: ${{ secrets.TEST_URL || 'http://example.com' }}
          SCAN_TYPE: security
        run: |
          npx playwright install --with-deps chromium
          npx playwright test tests/security.spec.ts --project=chromium

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            playwright-report/
            test-results/
            zap-results.json
          retention-days: 30

      - name: Cleanup ZAP
        if: always()
        run: |
          curl -s "http://localhost:8080/JSON/core/action/shutdown/"