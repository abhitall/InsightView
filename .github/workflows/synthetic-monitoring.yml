name: Synthetic Monitoring

on:
  schedule:
    - cron: '*/30 * * * *'  # Regular monitoring
    - cron: '0 2 * * 1'     # Weekly security scan
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      test_url:
        description: 'Target URL to test'
        required: false
        type: string
      scan_type:
        description: 'Type of scan to run'
        required: false
        type: choice
        options:
          - monitoring
          - security
          - both
        default: 'both'

env:
  TEST_URL: ${{ inputs.test_url || secrets.TEST_URL }}
  ZAP_API_URL: http://localhost:8080
  ZAP_API_KEY: ${{ secrets.ZAP_API_KEY || '' }}
  AUTH_USERNAME: ${{ secrets.AUTH_USERNAME }}
  AUTH_PASSWORD: ${{ secrets.AUTH_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  PROMETHEUS_PUSHGATEWAY: ${{ secrets.PROMETHEUS_PUSHGATEWAY }}
  GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
  NODE_ENV: production
  DEBUG: pw:api*,zap:*
  SCAN_TYPE: ${{ github.event.schedule == '0 2 * * 1' && 'full' || github.event_name == 'pull_request' && 'quick' || inputs.scan_type || 'monitoring' }}
  GITHUB_EVENT_NAME: ${{ github.event_name }}

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # Cache Playwright browsers
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install dependencies
        run: |
          npm ci
          # Only install browsers if not cached
          if [ ! -d ~/.cache/ms-playwright ]; then
            npx playwright install --with-deps chromium
          fi

      # Use our composite action for ZAP setup
      - name: Setup ZAP
        uses: ./.github/actions/setup-zap
        id: zap-setup
        with:
          zap-api-url: ${{ env.ZAP_API_URL }}
          max-retries: '30'

      # Use our composite action for test execution
      - name: Run tests
        if: steps.zap-setup.outputs.zap-status == 'ready'
        uses: ./.github/actions/run-tests
        id: test-run
        with:
          test-url: ${{ env.TEST_URL || secrets.TEST_URL || 'http://example.com' }}
          scan-type: ${{ env.SCAN_TYPE }}
          browser: 'chromium'
          test-spec: 'tests/security.spec.ts'
          retries: '2'

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_id }}
          path: |
            playwright-report/
            test-results/
            zap-results.json
          retention-days: 30
          if-no-files-found: warn

      - name: Handle test failure
        if: steps.test-run.outputs.test-status == 'failure'
        run: |
          echo "::error::Some tests failed. Check the test results for details."
          exit 1

      - name: Cleanup ZAP
        if: always()
        run: |
          # Gracefully stop active scans first
          curl -sf "${{ env.ZAP_API_URL }}/JSON/ascan/action/stopAllScans/" || true
          curl -sf "${{ env.ZAP_API_URL }}/JSON/spider/action/stopAllScans/" || true
          sleep 2
          # Shutdown ZAP and remove container
          curl -sf "${{ env.ZAP_API_URL }}/JSON/core/action/shutdown/" || true
          sleep 5
          docker rm -f zap || true