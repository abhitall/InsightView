name: Synthetic Monitoring

on:
  schedule:
    - cron: '*/30 * * * *'  # Runs every 30 minutes
  workflow_dispatch:  # Allows manual triggering
    inputs:
      test_url:
        description: 'Target URL to test'
        required: false
        type: string
      browser:
        description: 'Browser to test with'
        required: false
        type: choice
        options:
          - chromium
          - mobile-chrome
        default: 'chromium'
      env_vars:
        description: 'Additional environment variables (JSON)'
        required: false
        type: string
        default: '{}'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  PROMETHEUS_PUSHGATEWAY: ${{ secrets.PROMETHEUS_PUSHGATEWAY }}
  TEST_URL: ${{ inputs.test_url || secrets.TEST_URL }}

jobs:
  synthetic-tests:
    runs-on: ubuntu-latest
    
    services:
      zap:
        image: ghcr.io/zaproxy/zaproxy:stable
        ports:
          - 8080:8080
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1"
          --health-interval 20s
          --health-timeout 10s
          --health-retries 6
          --health-start-period 30s
        env:
          JAVA_OPTS: "-Xmx512m"
        volumes:
          - /tmp/zap:/zap/wrk:rw

    steps:
      - uses: actions/checkout@v4

      - name: Wait for ZAP
        run: |
          timeout 60s bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8080)" != "200" ]]; do sleep 5; done' || false

      - name: Run Synthetic Monitoring
        uses: ./.github/actions/synthetic-monitoring
        env:
          ZAP_API_URL: http://localhost:8080
        with:
          test_url: ${{ env.TEST_URL }}
          aws_access_key_id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ env.AWS_REGION }}
          s3_bucket: ${{ env.S3_BUCKET }}
          prometheus_pushgateway: ${{ env.PROMETHEUS_PUSHGATEWAY }}
          browser: ${{ inputs.browser || 'chromium' }}
          env_vars: ${{ inputs.env_vars }}