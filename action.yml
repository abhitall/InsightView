name: 'Synthetic Monitoring'
description: 'Run synthetic monitoring tests with Playwright, sending metrics to Prometheus and traces to S3'
branding:
  icon: 'activity'
  color: 'blue'

inputs:
  test_url:
    description: 'Target URL to test'
    required: true
  aws_access_key_id:
    description: 'AWS/S3 Access Key ID'
    required: false
  aws_secret_access_key:
    description: 'AWS/S3 Secret Access Key'
    required: false
  aws_region:
    description: 'AWS/S3 Region. For AWS S3 buckets, this must match your bucket region (e.g., us-east-2)'
    required: false
  s3_bucket:
    description: 'S3 Bucket name'
    required: false
  s3_endpoint:
    description: 'S3 Endpoint URL (Do NOT set this for AWS S3 buckets. Only use for non-AWS S3-compatible services)'
    required: false
  s3_force_path_style:
    description: 'Use path-style addressing for S3 (Do NOT set this for AWS S3 buckets. Only use for non-AWS S3-compatible services)'
    required: false
    default: 'false'
  s3_tls_verify:
    description: 'Verify TLS certificates for S3 (Do NOT set this for AWS S3 buckets. Only use for non-AWS S3-compatible services)'
    required: false
    default: 'true'
  minio_access_key:
    description: 'MinIO Access Key'
    required: false
  minio_secret_key:
    description: 'MinIO Secret Key'
    required: false
  minio_root_user:
    description: 'MinIO Root User'
    required: false
  minio_root_password:
    description: 'MinIO Root Password'
    required: false
  minio_endpoint:
    description: 'MinIO Endpoint URL'
    required: false
  prometheus_pushgateway:
    description: 'Prometheus Pushgateway URL'
    required: true
  browser:
    description: 'Browser to use for testing'
    required: false
    default: 'chromium'
  config_path:
    description: 'Path to Playwright config file'
    required: false
    default: ''
  test_dir:
    description: 'Directory containing test files'
    required: false
    default: ''
  env_vars:
    description: 'JSON string of additional environment variables'
    required: false
    default: '{}'

runs:
  using: "composite"
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install system dependencies
      shell: bash
      run: |
        if command -v apt-get >/dev/null; then
          apt-get update && apt-get install -y jq
        elif command -v apk >/dev/null; then
          apk add --no-cache jq
        else
          echo "Package manager not found, attempting to continue..."
        fi

    - name: Install dependencies
      shell: bash
      run: |
        npm ci
        # Install optional Lighthouse dependencies
        npm install lighthouse chrome-launcher --no-save || echo "Failed to install Lighthouse, continuing without it"

    - name: Install Playwright
      shell: bash
      run: |
        npx playwright install --with-deps ${{ inputs.browser }}
        
        # Find Chrome for Lighthouse - try multiple locations
        CHROME_PATHS=(
          "/usr/bin/google-chrome"
          "/usr/bin/google-chrome-stable"
          "/usr/bin/chromium"
          "/usr/bin/chromium-browser"
          "$(find /ms-playwright -name chrome -type f 2>/dev/null | head -1)"
          "$(find /home -name chrome -type f 2>/dev/null | head -1)"
          "$(which google-chrome 2>/dev/null)"
          "$(which chromium 2>/dev/null)"
        )
        
        CHROME_FOUND=""
        for chrome_path in "${CHROME_PATHS[@]}"; do
          if [ -n "$chrome_path" ] && [ -f "$chrome_path" ] && [ -x "$chrome_path" ]; then
            CHROME_FOUND="$chrome_path"
            echo "Found Chrome at: $chrome_path"
            break
          fi
        done
        
        if [ -n "$CHROME_FOUND" ]; then
          echo "CHROME_PATH=$CHROME_FOUND" >> $GITHUB_ENV
          echo "Chrome path set to: $CHROME_FOUND"
        else
          echo "No Chrome found, Lighthouse reports will be skipped"
          echo "LIGHTHOUSE_DISABLED=true" >> $GITHUB_ENV
        fi

    - name: Setup environment
      shell: bash
      run: |
        # Start with base configuration
        cat << EOF > .env
        PROMETHEUS_PUSHGATEWAY=${{ inputs.prometheus_pushgateway }}
        TEST_URL=${{ inputs.test_url }}
        EOF

        # Configure S3/MinIO if any S3 configuration is provided
        if [ ! -z "${{ inputs.s3_bucket }}" ] || [ ! -z "${{ inputs.aws_access_key_id }}" ] || [ ! -z "${{ inputs.minio_access_key }}" ] || [ ! -z "${{ inputs.minio_root_user }}" ]; then
          # AWS S3 Configuration (if provided)
          if [ ! -z "${{ inputs.aws_access_key_id }}" ]; then
            cat << EOF >> .env
        AWS_ACCESS_KEY_ID=${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY=${{ inputs.aws_secret_access_key }}
        AWS_REGION=${{ inputs.aws_region }}
        EOF
          fi

          # MinIO Configuration (if provided)
          if [ ! -z "${{ inputs.minio_access_key }}" ]; then
            cat << EOF >> .env
        MINIO_ACCESS_KEY=${{ inputs.minio_access_key }}
        MINIO_SECRET_KEY=${{ inputs.minio_secret_key }}
        EOF
          fi

          if [ ! -z "${{ inputs.minio_root_user }}" ]; then
            cat << EOF >> .env
        MINIO_ROOT_USER=${{ inputs.minio_root_user }}
        MINIO_ROOT_PASSWORD=${{ inputs.minio_root_password }}
        EOF
          fi

          if [ ! -z "${{ inputs.minio_endpoint }}" ]; then
            cat << EOF >> .env
        MINIO_ENDPOINT=${{ inputs.minio_endpoint }}
        EOF
          fi

          # S3 Bucket and endpoint configuration
          if [ ! -z "${{ inputs.s3_bucket }}" ]; then
            cat << EOF >> .env
        S3_BUCKET=${{ inputs.s3_bucket }}
        EOF
          fi

          # Only add S3 endpoint configuration for non-AWS S3 services
          if [ ! -z "${{ inputs.s3_endpoint }}" ]; then
            cat << EOF >> .env
        S3_ENDPOINT=${{ inputs.s3_endpoint }}
        S3_FORCE_PATH_STYLE=${{ inputs.s3_force_path_style }}
        S3_TLS_VERIFY=${{ inputs.s3_tls_verify }}
        EOF
          fi
        fi

        # Add custom environment variables if provided
        if [ ! -z "${{ inputs.env_vars }}" ]; then
          echo "${{ inputs.env_vars }}" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' >> .env
        fi

    - name: Create test directories
      shell: bash
      run: mkdir -p playwright-report test-results

    - name: Run synthetic tests
      shell: bash
      run: |
        if [ -n "${{ inputs.config_path }}" ]; then
          npm run test:synthetic -- --config="${{ inputs.config_path }}" --project=${{ inputs.browser }}
        else
          npm run test:synthetic -- --project=${{ inputs.browser }}
        fi

    - name: Upload Playwright report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report-${{ github.run_id }}
        path: |
          playwright-report/
          test-results/
        retention-days: 30